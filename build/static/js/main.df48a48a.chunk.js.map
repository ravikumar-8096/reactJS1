{"version":3,"sources":["components/counter/counter.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Counter","add","signPad","useRef","data","className","penColor","toDataURL","canvasProps","width","height","ref","onClick","current","clear","console","log","fromDataURL","App","sub","double","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAyCeA,EAtCD,SAAC,GAAU,EAATC,IAAU,IAKlBC,EAAUC,iBAAO,IACjBC,EAAO,GAaX,OACI,mCACI,sBAAKC,UAAU,mCAAf,UACI,oBAAIA,UAAU,+BAAd,wBAGA,cAAC,IAAD,CAAcC,SAAS,QAAQC,WAAS,EACpDC,YAAa,CAACC,MAAO,IAAKC,OAAQ,IAAKL,UAAW,aAClDM,IAAKT,IAEJ,wBAAQU,QAtBK,WACZV,EAAQW,QAAQC,SAqBjB,mBACG,wBAAQF,QApBC,WACXR,EAAOF,EAAQW,QAAQN,YACvBQ,QAAQC,IAAI,aAAaZ,IAkBvB,kBACA,wBAAQQ,QAjBC,WACXV,EAAQW,QAAQI,YAAYb,GAC5BW,QAAQC,IAAI,cAAcd,EAAQW,QAAQI,YAAYb,KAepD,wBCrBOc,MAVf,WACE,OACE,mCACE,cAAC,EAAD,CAAUC,KAAM,EAAGlB,IAAK,EAAGmB,OAAQ,OCM1BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.df48a48a.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport SignaturePad from \"react-signature-canvas\";\r\n\r\nlet Counter = ({add}) => {\r\n    // const [counter, setCounter] = React.useState(0);\r\n    // let handleCounter = (value) => {\r\n    //     // setCounter(counter + value)\r\n    // }\r\n    let signPad = useRef({});\r\n    let data = \"\";\r\n    const clear = () => {\r\n      signPad.current.clear();\r\n    };\r\n    const save = () => {\r\n      data = signPad.current.toDataURL();\r\n      console.log('ravi-dat--',data);\r\n    };\r\n    const show = () => {\r\n      signPad.current.fromDataURL(data);\r\n      console.log('ravi-show--',signPad.current.fromDataURL(data));\r\n\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid text-center mt-5\">\r\n                <h1 className=\"text-uppercase text-info h1 \">Signatures</h1>\r\n                {/* <div className=\"text-success display-3 my-4  font-weight-bold\">{counter}</div> */}\r\n                {/* <button className=\"btn btn-primary mx-2 border border-success\" onClick={() => handleCounter(add)}>Submit</button> */}\r\n                <SignaturePad penColor='green' toDataURL\r\n    canvasProps={{width: 500, height: 200, className: 'sigCanvas'}} \r\n    ref={signPad}\r\n    />\r\n     <button onClick={clear}>Clear</button>\r\n        <button onClick={save}>Save</button>\r\n        <button onClick={show}>Show</button>\r\n                 </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Counter;","import Counter from \"./components/counter/counter\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Counter  sub={-1} add={1} double={2}/>  \r\n\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}